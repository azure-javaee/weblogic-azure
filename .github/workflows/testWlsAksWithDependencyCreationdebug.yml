name: Debug Test WLS on AKS with Dependency creation
run-name: Debug Test WLS on AKS with Dependency creation with `db`:${{ inputs.databaseType }}

on:
  workflow_dispatch:
    inputs:
      isForDemo:
        description: 'If set to true, resources will not be deleted'
        required: true
        default: 'false'
      gitUserNameForArtifactsLocation:
        description: 'Replaced into https://raw.githubusercontent.com/#gitUserName#/weblogic-azure/#testbranchName#/weblogic-azure-aks/src/main/arm/'
        required: true
        default: oracle
      testBranchNameForArtifactsLocation:
        description: 'Replaced into https://raw.githubusercontent.com/#gitUserName#/weblogic-azure/#testbranchName#/weblogic-azure-aks/src/main/arm/'
        required: true
        default: main
      vmSize:
        description: 'The VM size for the AKS pool'
        required: true
        default: Standard_D2s_v3
      location:
        description: 'The location for the resources'
        required: true
        default: centralus
      databaseType:
        description: 'Database connection'
        required: true
        default: 'mssqlserver'
        type: choice
        options:
          - none
          - mssqlserver
          - mssqlserver-passwordless
          - postgresql(flexible)
          - postgresql-passwordless(flexible)
      configurations_for_ci:
        description: "JSON string of environment variables used for CI"
        required: false
        default: '{}'
  # sample cURL
  # curl --verbose -X POST https://api.github.com/repos/<github_user>/weblogic-azure/dispatches -H 'Accept: application/vnd.github.everest-preview+json' -H 'Authorization: token <personal_access_token>' --data '{"event_type": "aks-integration-test-with-dependency-creation", "client_payload": {"gitUserNameForArtifactsLocation": "<github_user>", "testBranchNameForArtifactsLocation": "<branch_name>", "isForDemo": "false"}}'
  repository_dispatch:
    types: [aks-integration-test-with-dependency-creation,integration-test-all]

env:
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
    resourceGroupForWlsAks: wlsd-aks-${{ github.run_id }}-${{ github.run_number }}
    dbAdminUser: weblogic
    dbPassword: ${{ secrets.DB_PASSWORD }}
    dbName: wlsdb${{ github.run_id }}${{ github.run_number }}
    dbServerName: weblogicdb-${{ github.run_id }}-${{ github.run_number }}
    uamiName: uami${{ github.run_id }}${{ github.run_number }}
    ocrSSOUser: ${{ secrets.ORC_SSOUSER }}
    ocrSSOPSW: ${{ secrets.ORC_SSOPSW }}
    wdtRuntimePassword: ${{ secrets.WDT_RUNTIMEPSW}}
    wlsUserName: ${{ secrets.WLS_USERNAME }}
    wlsPassword: ${{ secrets.WLS_PSW }}
    resourceGroupForDB: wlsd-db-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    resourceGroupForStorageAccount: wlsd-sa-${{ github.run_id }}-${{ github.run_number }}
    storageAccountName: wlsdsa${{ github.run_id }}${{ github.run_number }}
    storageContainerName: wlsdcon${{ github.run_id }}${{ github.run_number }}
    azCliVersion: 2.72.0

jobs:
    deploy-db:
        runs-on: ubuntu-latest
        outputs:
          databaseType: ${{ steps.database-parameters.outputs.databaseType }}
          enableDB: ${{ steps.database-parameters.outputs.enableDB }}
          enablePswlessConnection: ${{ steps.database-parameters.outputs.enablePswlessConnection }}
          dbUser: ${{ steps.database-parameters.outputs.dbUser }}
          dsConnectionURL: ${{ steps.database-parameters.outputs.dsConnectionURL }}
          dbIdentity: ${{ steps.database-parameters.outputs.dbIdentity }}
        steps:
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Create Resource Group
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    echo "create resource group" ${{ env.resourceGroupForDB }}
                    az group create --verbose --name ${{ env.resourceGroupForDB }} --location ${{ inputs.location }}

            - uses: actions/checkout@v2.3.4

            - name: Provision database
              id: database-provision
              uses: ./.github/actions/database-provision
              with:
                databaseType: ${{ inputs.databaseType }}
                resourceGroup: ${{ env.resourceGroupForDB }}
                uamiName: ${{ env.uamiName }}
                location: ${{ inputs.location }}
                dbInstanceName: ${{ env.dbServerName }}
                dbPassword: ${{ env.dbPassword }}
                databaseName: ${{ env.dbName }}
                dbAdminUser: ${{ env.dbAdminUser }}

            - name: Get database parameters
              id: database-parameters
              uses: ./.github/actions/database-parameters
              with:
                databaseType: ${{ inputs.databaseType }}
                uamiId: ${{ steps.database-provision.outputs.uamiId }}
                serverHost: ${{ steps.database-provision.outputs.serverHost }}
                dbInstanceName: ${{ env.dbServerName }}
                databaseName: ${{ env.dbName }}

            - name: echo the outputs of database-parameters
              run: |
                echo "enableDB=${{ steps.database-parameters.outputs.enableDB }}"
                echo "enablePswlessConnection=${{ steps.database-parameters.outputs.enablePswlessConnection }}"
                echo "databaseType=${{ steps.database-parameters.outputs.databaseType }}"
                echo "dsConnectionURL=${{ steps.database-parameters.outputs.dsConnectionURL }}"
                echo "dbUser=${{ steps.database-parameters.outputs.dbUser }}"
                echo "dbIdentity=${{ steps.database-parameters.outputs.dbIdentity }}"

            - name: echo the outputs to a file called a.txt
              run: |
                echo "enableDB=${{ steps.database-parameters.outputs.enableDB }}" >> a.txt
                echo "enablePswlessConnection=${{ steps.database-parameters.outputs.enablePswlessConnection }}" >> a.txt
                echo "databaseType=${{ steps.database-parameters.outputs.databaseType }}" >> a.txt
                echo "dsConnectionURL=${{ steps.database-parameters.outputs.dsConnectionURL }}" >> a.txt
                echo "dbUser=${{ steps.database-parameters.outputs.dbUser }}" >> a.txt
                echo "dbIdentity=${{ steps.database-parameters.outputs.dbIdentity }}" >> a.txt

    get-value-of-deploy-db:
      needs: deploy-db
      runs-on: ubuntu-latest
      steps:
        - name: echo the enableDB outputs of deploy-db
          run: |
            echo "enableDB=${{ needs.deploy-db.outputs.enableDB }}"
        - name: echo the enablePswlessConnection outputs of deploy-db
          run: |
            echo "enablePswlessConnection=${{ needs.deploy-db.outputs.enablePswlessConnection }}"
        - name: echo the databaseType outputs of deploy-db
          run: |
            echo "databaseType=${{ needs.deploy-db.outputs.databaseType }}"
        - name: echo the dsConnectionURL outputsof deploy-db
          run: |
            echo "dsConnectionURL=${{ needs.deploy-db.outputs.dsConnectionURL }}"
        - name: echo the dbIdentity outputs of deploy-db
          run: |
            echo "dbIdentity=${{ needs.deploy-db.outputs.dbIdentity }}"
        - name: echo the dbUser outputs of deploy-db
          run: |
            echo "dbUser=${{ needs.deploy-db.outputs.dbUser }}"

        - name: echo the outputs to a file called b.txt
          run: |
            echo "enableDB=${{ needs.deploy-db.outputs.enableDB }}" >> b.txt
            echo "enablePswlessConnection=${{ needs.deploy-db.outputs.enablePswlessConnection }}" >> b.txt
            echo "databaseType=${{ needs.deploy-db.outputs.databaseType }}" >> b.txt
            echo "dsConnectionURL=${{ needs.deploy-db.outputs.dsConnectionURL }}" >> b.txt
            echo "dbIdentity=${{ needs.deploy-db.outputs.dbIdentity }}" >> b.txt
            echo "dbUser=${{ needs.deploy-db.outputs.dbUser }}" >> b.txt

    cleanup:
      needs: [get-value-of-deploy-db]
      if: ${{ always() && needs.preflight.outputs.isForDemo == 'false' }}
      runs-on: ubuntu-latest
      steps:
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete DB Resource Group
        id: delete-db-resource-group
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            echo "delete... " ${{ env.resourceGroupForDB }}
            az group delete --yes --no-wait --verbose --name ${{ env.resourceGroupForDB }}
      
