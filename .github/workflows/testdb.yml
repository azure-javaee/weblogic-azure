name: testdb
run-name: testdb `db`:${{ inputs.databaseType }}

on:
  workflow_dispatch:
    inputs:
      location:
        description: 'The location for the resources'
        required: true
        default: centralus
      databaseType:
        description: 'Database connection'
        required: true
        default: 'mssqlserver'
        type: choice
        options:
          - none
          - mssqlserver
          - mssqlserver-passwordless
          - postgresql(flexible)
          - postgresql-passwordless(flexible)
  # sample cURL

  repository_dispatch:
    types: [aks-integration-test-with-dependency-creation,integration-test-all]

env:
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
    resourceGroupForWlsAks: wlsd-aks-${{ github.run_id }}-${{ github.run_number }}
    dbAdminUser: weblogic
    dbPassword: ${{ secrets.DB_PASSWORD }}
    dbName: wlsdb${{ github.run_id }}${{ github.run_number }}
    dbServerName: weblogicdb-${{ github.run_id }}-${{ github.run_number }}
    uamiName: uami${{ github.run_id }}${{ github.run_number }}
    resourceGroupForDB: wlsd-db-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}

jobs:

    deploy-db:
        runs-on: ubuntu-latest
        outputs:
          databaseType: ${{ steps.database-parameters.outputs.databaseType }}
          enableDB: ${{ steps.database-parameters.outputs.enableDB }}
          enablePswlessConnection: ${{ steps.database-parameters.outputs.enablePswlessConnection }}
          dsConnectionURL: ${{ steps.database-parameters.outputs.dsConnectionURL }}
          dbIdentity: ${{ steps.database-parameters.outputs.dbIdentity }}
        steps:
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Create Resource Group
              run:
                  echo "create resource group" ${{ env.resourceGroupForDB }}
                  echo "location is ${{ inputs.location }}"
                  az group create -n ${{ env.resourceGroupForDB }} -l ${{ inputs.location }}
            - name: Check the resource group
              run: |
                echo "Check the resource group" ${{ env.resourceGroupForDB }}
                az group show -n ${{ env.resourceGroupForDB }} --output table

            - uses: actions/checkout@v2.3.4

            - name: Provision database
              id: database-provision
              uses: ./.github/actions/database-provision
              with:
                databaseType: ${{ inputs.databaseType }}
                resourceGroup: ${{ env.resourceGroupForDB }}
                uamiName: ${{ env.uamiName }}
                location: ${{ inputs.location }}
                dbInstanceName: ${{ env.dbServerName }}
                dbPassword: ${{ env.dbPassword }}
                databaseName: ${{ env.dbName }}
                dbAdminUser: ${{ env.dbAdminUser }}

            - name: Get database parameters
              id: database-parameters
              uses: ./.github/actions/database-parameters
              with:
                databaseType: ${{ inputs.databaseType }}
                uamiId: ${{ steps.database-provision.outputs.uamiId }}
                serverHost: ${{ steps.database-provision.outputs.serverHost }}
                dbInstanceName: ${{ env.dbServerName }}
                databaseName: ${{ env.dbName }}

            - name: echo the outputs of database-parameters
              run: |
                echo "enableDB=${{ steps.database-parameters.outputs.enableDB }}"
                echo "enablePswlessConnection=${{ steps.database-parameters.outputs.enablePswlessConnection }}"
                echo "databaseType=${{ steps.database-parameters.outputs.databaseType }}"
                echo "dsConnectionURL=${{ steps.database-parameters.outputs.dsConnectionURL }}"
                echo "dbUser=${{ steps.database-parameters.outputs.dbUser }}"
                echo "dbIdentity=${{ steps.database-parameters.outputs.dbIdentity }}"

    get-value-of-deploy-db:
      needs: deploy-db
      runs-on: ubuntu-latest
      steps:
        - name: echo the outputs of deploy-db
          run: |
            echo "enableDB=${{ needs.deploy-db.outputs.enableDB }}"
            echo "enablePswlessConnection=${{ needs.deploy-db.outputs.enablePswlessConnection }}" 
            echo "databaseType=${{ needs.deploy-db.outputs.databaseType }}" 
            echo "dsConnectionURL=${{ needs.deploy-db.outputs.dsConnectionURL }}"
            echo "dbUser=${{ needs.deploy-db.outputs.dbUser }}"
            echo "dbIdentity=${{ needs.deploy-db.outputs.dbIdentity }}"

    cleanup:
      if: always()
      runs-on: ubuntu-latest
      needs: get-value-of-deploy-db
      steps:
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete DB Resource Group
        id: delete-db-resource-group
        run:
            sleep 60s
            echo "delete... " ${{ env.resourceGroupForDB }}
            az group delete --yes --no-wait --verbose --name ${{ env.resourceGroupForDB }}